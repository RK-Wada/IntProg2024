procedure Poner_DeColor_(cantidadAPoner, colorAPoner){
    /*
    Propósito: Dado un número "cantidadAPoner" y un color "colorAPoner", poner tantas bolitas de un determinado color en la celda actual.
    Parámetros:
    - cantidadAPoner: número / cantidad de bolitas rojas a poner.
    - colorAPoner: color / color de las bolitas a poner.
    Precondiciones: Ninguna.
    */
    repeat (cantidadAPoner){
        Poner(colorAPoner)
    }
}
---------------------------------------------------------------------------------------------

procedure Mover_VecesAl_ (cantidadAMover, direccionAMover){
    /*
    Propósito: Dado un número "cantidadAMover" y una dirección "direccionAMover", mover el cabezal tantas veces como el número dado hacia la direccón dada.
    Parámetros:
    - cantidadAMover: número / cantidad de celdas a mover el cabezal.
    - direccionAMover: dirección / dirección hacia dónde mover el cabezal.
    Precondiciones: Debe haber al menos tantas celdas como se indique en "cantidadAMover" hacia "direccionAMover"
    */   
    repeat (cantidadAMover){
        Mover(direccionAMover)
    }
}

-------------------------------------------------------------------------------------------

procedure Sacar_DeColor_ (cantidadASacar, colorASacar){
    /*
    Propósito: Dado un número "cantidadASacar" y un color "colorASacar", saque tantas bolitas como se indica del color que se especifique en la celda actual.
    Parámetros: 
    - cantidadASacar: número / cantidad de bolitas a sacar.
    - colorASacar: color / color de las bolitas a sacar.
    Precondiciones: Debe haber tantas bolitas como "cantidadASacar" del color "colorASacar" en la celda actual.
    */
    repeat(cantidadASacar){
        Sacar(colorASacar)
    }
}

-------------------------------------------------------------------------------------------

procedure IrAEsquinaAl_Y_ (primeraDireccion, segundaDireccion){
    /*
    Propósito: Dadas dos direcciones, mover el cabezal hacia la esquina entre dichas direcciones.
    Parámetros:
    - primeraDireccion: dirección / Primera dirección hacia la cual mover el cabezal.
    - segundaDireccion: dirección / Segunda dirección hacia la cual mover el cabezal.
    Precondiciones:  Ninguna.
    */    
    IrAlBorde(primeraDireccion)
    IrAlBorde(segundaDireccion)
}

-------------------------------------------------------------------------------------------

procedure SacarTodasLasDeColor_ (colorASacar){
    /*
    Propósito: Sacar todas las bolitas del color **colorASacar** de la celda actual. 
    Parámetros:
    - colorASacar: Color / color de las bolitas a sacar.
    Precondiciones:
    Ninguna.
    */
    repeat(nroBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

-------------------------------------------------------------------------------------------

procedure VaciarCelda(){
    /*
    Propósito: 
    - Eliminar todas las bolitas de colores de la celda actual.
    Precondiciones:
    - Ninguna.
    */
    SacarTodasLasDeColor_(Rojo)
    SacarTodasLasDeColor_(Verde)
    SacarTodasLasDeColor_(Negro)
    SacarTodasLasDeColor_(Azul)
}

-------------------------------------------------------------------------------------------

procedure Poner_Si_ (color, condicion){
    /*
    Propósito: Poner una bolita de color **color** en la celda actual si la condición es verdadera.
    Parámetros:
    - color: color / color de la bolita a poner.
    - condicion: Booleano / condición para determinar si se pone o no la bolita.
    Precondición:
    - Ninguna.
    */
    if (condicion) then {
        Poner (color)
    }
}

-------------------------------------------------------------------------------------------

procedure Sacar_Si_ (color, condicion){
    /*
    Propósito: Saca una bolita de color **color** en la celda actual si la condición es verdadera.
    Parámetros:
    - color: color / color de la bolita a Sacar.
    - condicion: Booleano / condición para determinar si se saca o no la bolita.
    Precondición:
    - Ninguna.
    */
    if (condicion) then {
        Sacar (color)
    }
}

-------------------------------------------------------------------------------------------

procedure Mover_Si_ (direccion, condicion){
    /*
    Propósito: Mueve el cabezal hacia la dirección **direccion** si la condición es verdadera.
    Parámetros:
    - direccion: dirección / dirección hacia dónde mover el cabezal.
    - condicion: Booleano / condición para determinar si se saca o no la bolita.
    Precondición:
    - Ninguna.
    */
    if (condicion) then {
        Mover (direccion)
    }
}

-------------------------------------------------------------------------------------------

function esCeldaVacia(){
    /*
    Propósito: Indica si la celda actual está vacía.
    Precondición:
    - Ninguna
    Tipo: Booleano
    */
    return (not hayBolitas(Rojo) && not hayBolitas(Verde) && not hayBolitas(Azul) && not hayBolitas(Negro))
}

-------------------------------------------------------------------------------------------

function hayAlMenosUnaDeCada(){
    /*
    Propósito: Indica si en la celda actual hay al menos 1 bolita de cada color.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (hayBolitas(Rojo) && hayBolitas(Verde) && hayBolitas(Negro) && hayBolitas(Azul))
}


-------------------------------------------------------------------------------------------

function esCeldaConBolitas(){
    /*
    Propósito: Indica si la celda actual hay al menos una bolita de cualquier color.
    Precondición:
    - Ninguna
    Tipo: Booleano
    */
    return (hayBolitas(Rojo) || hayBolitas(Verde) || hayBolitas(Azul) || hayBolitas(Negro))
}

-------------------------------------------------------------------------------------------

procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito:
    - Dirigir el cabezal hacia la primera celda en dónde se comenzará el recorrido de las direcciones **dirPrincipal** y **dirSecundaria**
    Parámetros:
    - dirPrincipal: Dirección / Primera dirección hacia dónde irá el recorrido.
    - dirSecundaria: Dirección / Segunda dirección hacia dónde irá el recorrido.
    Precondición:
    - Ninguna.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

-------------------------------------------------------------------------------------------

function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito: 
    - Indica si hay una siguiente celda en un recorrido hacia las direcciones **dirPrincipal** y **dirSecundaria**.
    Parámetros:
    - dirPrincipal: Dirección / primera dirección a tener en cuenta si hay celdas.
    - dirSecundaria: Dirección / segunda dirección a tener en cuenta si hay celdas.
    Precondición:
    - Ninguna.
    Tipo: Booleano.
    */
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

-------------------------------------------------------------------------------------------

procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito:
    - Dirigir el cabezal a la siguiente celda en un recorrido hacia las direcciones **dirPrincipal** y **dirSecundaria**.
    Parámetros:
    - dirPrincipal: Dirección / Primera dirección hacia dónde se moverá en el recorrido.
    - dirSecundaria: Dirección / Segunda dirección hacia dónde se moverá en el recorrido.
    Precondición:
    - **dirPrincipal** y **dirSecundaria** no pueden ser opuestas ni iguales.
    */
    if (puedeMover(dirPrincipal)) then {
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}

-------------------------------------------------------------------------------------------

function hayBolitas_Al_(color, direccion){
    /*
    Propósito: Indica si existe una celda hacia la dirección **direccion** y si la celda lindante hacia la dirección **dirección** posee bolitas del color **color**. 
    Parámetros: 
    - color: Color / color de las bolitas a ver.
    - direccion: Dirección / dirección hacia dónde mover el cabezal.
    Precondición: 
    - Ninguna.
    Tipo: Booleano.
    */
    return (puedeMover(direccion) && hayBolitas_EnCeldaAl_(color, direccion))
}

-------------------------------------------------------------------------------------------

function minimoEntre_Y_(primerValor, segundoValor){
    /*
    Propósito: 
    - Indica cual de los dos valores "primerValor" y "segundoValor" es más chico.
    Parámetros: 
    - primerValor: Cualquiera / Primer valor a comparar.
    - segundoValor: Cualquiera / Segundo valor a comparar.
    Tipo: Número
    */ 
    return (choose (primerValor) when (primerValor <= segundoValor)
    segundoValor otherwise)
}

-------------------------------------------------------------------------------------------

function maximoEntre_Y_(primerValor, segundoValor){
    /*
    Propósito: 
    - Indica cual de los dos valores "primerValor" y "segundoValor" es más grande.
    Parámetros: 
    - primerValor: Cualquiera / Primer valor a comparar.
    - segundoValor: Cualquiera / Segundo valor a comparar.
    Tipo: Número
    */ 
    return (choose (primerValor) when (primerValor >= segundoValor)
    segundoValor otherwise)
}

-------------------------------------------------------------------------------------------

function distanciaAlBorde_(bordeAIndicar){
    /*
    Propósito: 
    - Indica la cantidad de celdas que hay entre la celda actual y el borde **bordeAIndicar**
    Parámetro: 
    - bordeAIndicar: Dirección / dirección hacia dónde cuenta el cabezal.
    Precondiciones: 
    - Ninguna.
    Tipo: Número.
    Observaciones:
    - Es un recorrdido de acumulación sobre las celdas del tablero. Contando las celdas hacia el borde desde la celda actual. (la celda actual no está incluida, por lo que si la celda está en el borde **bordeAIndicar**, la distancia es 0)
    */
    contadorDeCeldas := 0 
    while (puedeMover(bordeAIndicar)) {
        Mover(bordeAIndicar)
        contadorDeCeldas := contadorDeCeldas + 1
    }
    return (contadorDeCeldas)
}

-------------------------------------------------------------------------------------------

a) 
function coordenadaX(){
    /*
    Propósito:
    - Indicar la coordenada de la columna de la celda actual.
    Precondiciones: 
    - Ninguna.
    Tipo: Número
    Observaciones: 
    - Es un recorrido de acumulación sobre las celdas del tablero. Contando las celdas desde la celda actual hasta el borde Oeste. (la celda actual está incluida) 
    */
    return (distanciaAlBorde_(Oeste))
}

b) 
function coordenadaY(){
    /*
    Propósito:
    - Indicar la coordenada de la fila de la celda actual.
    Precondiciones: 
    - Ninguna.
    Tipo: Número
    Observaciones: 
    - Es un recorrido de acumulación sobre las celdas del tablero. Contando las celdas desde la celda actual hasta el borde Sur. (la celda actual está incluida) 
    */
    return (distanciaAlBorde_(Sur))
}

-------------------------------------------------------------------------------------------

a) 
function nroFilas(){
    /*
    Propósito:
    - Indicar la cantidad de filas del tablero actual.
    Precondiciones: 
    - Ninguna.
    Tipo: Número
    */
    return (distanciaAlBorde_(Sur) + distanciaAlBorde_(Norte) + 1)
}

function distanciaAlBorde_(bordeAIndicar){
    /*
    Propósito: 
    - Indica la cantidad de celdas que hay entre la celda actual y el borde **bordeAIndicar**
    Parámetro: 
    - bordeAIndicar: Dirección / dirección hacia dónde cuenta el cabezal.
    Precondiciones: 
    - Ninguna.
    Tipo: Número.
    Observaciones:
    - Es un recorrdido de acumulación sobre las celdas del tablero. Contando las celdas hacia el borde desde la celda actual. (la celda actual no está incluida)
    */
    contadorDeCeldas := 0 
    while (puedeMover(bordeAIndicar)) {
        Mover(bordeAIndicar)
        contadorDeCeldas := contadorDeCeldas + 1
    }
    return (contadorDeCeldas)
}

b) 
function nroColumnas(){
    /*
    Propósito:
    - Indicar la cantidad de columnas del tablero actual.
    Precondiciones: 
    - Ninguna.
    Tipo: Número
    */
    return (distanciaAlBorde_(Este) + distanciaAlBorde_(Oeste) + 1)
}

function distanciaAlBorde_(bordeAIndicar){
    /*
    Propósito: 
    - Indica la cantidad de celdas que hay entre la celda actual y el borde **bordeAIndicar**
    Parámetro: 
    - bordeAIndicar: Dirección / dirección hacia dónde cuenta el cabezal.
    Precondiciones: 
    - Ninguna.
    Tipo: Número.
    Observaciones:
    - Es un recorrdido de acumulación sobre las celdas del tablero. Contando las celdas hacia el borde desde la celda actual. (la celda actual no está incluida)
    */
    contadorDeCeldas := 0 
    while (puedeMover(bordeAIndicar)) {
        Mover(bordeAIndicar)
        contadorDeCeldas := contadorDeCeldas + 1
    }
    return (contadorDeCeldas)
}

-------------------------------------------------------------------------------------------

function unoSi_CeroSiNo(valor){
    /*
    Propósito: 
    - Indica si la condición se cumple o no. Si se cumple, indica 1 y sino, indica 0.
    Parámetros:
    - valor: Cualquiera / Valor a evaluar.
    Precondiciones: 
    - Ninguna.
    Tipo: Booleano.
    */
    return (choose 1 when (valor)
                    0 otherwise)
}

-------------------------------------------------------------------------------------------

function nroVacias(){
    /*
    Propósito: 
    - Indicar la cantidad de celdas vacías en el tablero.
    Precondiciones: 
    - Ninguna.
    Tipo: Número.
    Observaciones: 
    - Es un recorrido de acumulación, recorriendo las celdas del tablero. Contando las celdas vacías.
    */
    IrAEsquinaAl_Y_(Oeste, Sur)
    nroCeldasVacias := 0
    nroCeldasVacias := nroCeldasVacias + unoSi_CeroSiNo(esCeldaVacia())
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        nroCeldasVacias := nroCeldasVacias + unoSi_CeroSiNo(esCeldaVacia())
    }
    return (nroCeldasVacias)
}

-------------------------------------------------------------------------------------------

function cantidadDeCeldasConBolitasDeColor_ (color){
    /*
    Propósito: 
    - Indica la cantidad de celdas que contienen al menos una bolita del color **color**.
    Parámetros: 
    - color: Color / Color a evaluar.
    Precondiciones: 
    - Ninguna.
    Tipo: Número.
    Observaciones:
    - Es un recorrido de acumulación, recorriendo las celdas del tablero. Acumula la cantidad de celdas que tienen al menos una bolita del color **color**.
    */
    IrAEsquinaAl_Y_(Oeste, Sur)
    nroCeldasConBolitas := 0
    nroCeldasConBolitas := nroCeldasConBolitas + unoSi_CeroSiNo(hayBolitas(color))
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        nroCeldasConBolitas := nroCeldasConBolitas + unoSi_CeroSiNo(hayBolitas(color))
    }
    return (nroCeldasConBolitas)
}

-------------------------------------------------------------------------------------------

function nroBolitasTotalDeColor_ (color){
    /*
    Propósito: 
    - Indica la cantidad de bolitas totales del color **color** en el tablero.
    Parámetros: 
    - color: Color / Color a evaluar.
    Precondiciones: 
    - Ninguna.
    Tipo: Número.
    Observaciones:
    - Es un recorrido de acumulación, recorriendo las celdas del tablero. Acumula la cantidad de bolitas totales del color **color** que hay en el tablero.
    */
    IrAEsquinaAl_Y_(Oeste, Sur)
    nroTotalBolitas := 0
    nroTotalBolitas := nroTotalBolitas + nroBolitas(color)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        nroTotalBolitas := nroTotalBolitas + nroBolitas(color)
    }
    return (nroTotalBolitas)
}

-------------------------------------------------------------------------------------------

DESPUES DEL PP

-------------------------------------------------------------------------------------------


function esSingular_(lista){
    /*
    Propósito: 
    - Indica si la lista es singular (si tiene un único elemento).
    Parámetros:
    - lista: Lista / Lista a determinar si es singular.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (not esVacia_(lista) && esVacia_(resto(lista)))
}

-------------------------------------------------------------------------------------------

LISTAS

-------------------------------------------------------------------------------------------

function esSingular_(lista){
    /*
    Propósito:
    - Indica si la lista **lista** es singular, es decir, tiene únicamente un elemento.
    Parámetros:
    - lista: Lista.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (not esVacia(lista) && esVacia(resto(lista)))
}

-------------------------------------------------------------------------------------------


