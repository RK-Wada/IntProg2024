procedure Poner_DeColor_(cantidadAPoner, colorAPoner){
    /*
    Propósito: Dado un número "cantidadAPoner" y un color "colorAPoner", poner tantas bolitas de un determinado color en la celda actual.
    Parámetros:
    - cantidadAPoner: número / cantidad de bolitas rojas a poner.
    - colorAPoner: color / color de las bolitas a poner.
    Precondiciones: Ninguna.
    */
    repeat (cantidadAPoner){
        Poner(colorAPoner)
    }
}
---------------------------------------------------------------------------------------------

procedure Mover_VecesAl_ (cantidadAMover, direccionAMover){
    /*
    Propósito: Dado un número "cantidadAMover" y una dirección "direccionAMover", mover el cabezal tantas veces como el número dado hacia la direccón dada.
    Parámetros:
    - cantidadAMover: número / cantidad de celdas a mover el cabezal.
    - direccionAMover: dirección / dirección hacia dónde mover el cabezal.
    Precondiciones: Debe haber al menos tantas celdas como se indique en "cantidadAMover" hacia "direccionAMover"
    */   
    repeat (cantidadAMover){
        Mover(direccionAMover)
    }
}

-------------------------------------------------------------------------------------------

procedure Sacar_DeColor_ (cantidadASacar, colorASacar){
    /*
    Propósito: Dado un número "cantidadASacar" y un color "colorASacar", saque tantas bolitas como se indica del color que se especifique en la celda actual.
    Parámetros: 
    - cantidadASacar: número / cantidad de bolitas a sacar.
    - colorASacar: color / color de las bolitas a sacar.
    Precondiciones: Debe haber tantas bolitas como "cantidadASacar" del color "colorASacar" en la celda actual.
    */
    repeat(cantidadASacar){
        Sacar(colorASacar)
    }
}

-------------------------------------------------------------------------------------------

procedure IrAEsquinaAl_Y_ (primeraDireccion, segundaDireccion){
    /*
    Propósito: Dadas dos direcciones, mover el cabezal hacia la esquina entre dichas direcciones.
    Parámetros:
    - primeraDireccion: dirección / Primera dirección hacia la cual mover el cabezal.
    - segundaDireccion: dirección / Segunda dirección hacia la cual mover el cabezal.
    Precondiciones:  Ninguna.
    */    
    IrAlBorde(primeraDireccion)
    IrAlBorde(segundaDireccion)
}

-------------------------------------------------------------------------------------------

procedure SacarTodasLasDeColor_ (colorASacar){
    /*
    Propósito: Sacar todas las bolitas del color **colorASacar** de la celda actual. 
    Parámetros:
    - colorASacar: Color / color de las bolitas a sacar.
    Precondiciones:
    Ninguna.
    */
    repeat(nroBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

-------------------------------------------------------------------------------------------

procedure Poner_Si_ (color, condicion){
    /*
    Propósito: Poner una bolita de color **color** en la celda actual si la condición es verdadera.
    Parámetros:
    - color: color / color de la bolita a poner.
    - condicion: Booleano / condición para determinar si se pone o no la bolita.
    Precondición:
    - Ninguna.
    */
    if (condicion) then {
        Poner (color)
    }
}

-------------------------------------------------------------------------------------------

procedure Sacar_Si_ (color, condicion){
    /*
    Propósito: Saca una bolita de color **color** en la celda actual si la condición es verdadera.
    Parámetros:
    - color: color / color de la bolita a Sacar.
    - condicion: Booleano / condición para determinar si se saca o no la bolita.
    Precondición:
    - Ninguna.
    */
    if (condicion) then {
        Sacar (color)
    }
}

-------------------------------------------------------------------------------------------

procedure Mover_Si_ (direccion, condicion){
    /*
    Propósito: Mueve el cabezal hacia la dirección **direccion** si la condición es verdadera.
    Parámetros:
    - direccion: dirección / dirección hacia dónde mover el cabezal.
    - condicion: Booleano / condición para determinar si se saca o no la bolita.
    Precondición:
    - Ninguna.
    */
    if (condicion) then {
        Mover (direccion)
    }
}

-------------------------------------------------------------------------------------------

function esCeldaVacia(){
    /*
    Propósito: Indica si la celda actual está vacía.
    Precondición:
    - Ninguna
    Tipo: Booleano
    */
    return (not hayBolitas(Rojo) && not hayBolitas(Verde) && not hayBolitas(Azul) && not hayBolitas(Negro)
}

-------------------------------------------------------------------------------------------

function hayAlMenosUnaDeCada(){
    /*
    Propósito: Indica si en la celda actual hay al menos 1 bolita de cada color.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (hayBolitas(Rojo) && hayBolitas(Verde) && hayBolitas(Negro) && hayBolitas(Azul))
}


-------------------------------------------------------------------------------------------

function esCeldaConBolitas(){
    /*
    Propósito: Indica si la celda actual hay al menos una bolita de cualquier color.
    Precondición:
    - Ninguna
    Tipo: Booleano
    */
    return (hayBolitas(Rojo) || hayBolitas(Verde) || hayBolitas(Azul) || hayBolitas(Negro))
}

-------------------------------------------------------------------------------------------

procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito:
    - Dirigir el cabezal hacia la primera celda en dónde se comenzará el recorrido de las direcciones **dirPrincipal** y **dirSecundaria**
    Parámetros:
    - dirPrincipal: Dirección / Primera dirección hacia dónde irá el recorrido.
    - dirSecundaria: Dirección / Segunda dirección hacia dónde irá el recorrido.
    Precondición:
    - Ninguna.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

-------------------------------------------------------------------------------------------

function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito: 
    - Indica si hay una siguiente celda en un recorrido hacia las direcciones **dirPrincipal** y **dirSecundaria**.
    Parámetros:
    - dirPrincipal: Dirección / primera dirección a tener en cuenta si hay celdas.
    - dirSecundaria: Dirección / segunda dirección a tener en cuenta si hay celdas.
    Precondición:
    - Ninguna.
    Tipo: Booleano.
    */
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

-------------------------------------------------------------------------------------------

procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito:
    - Dirigir el cabezal a la siguiente celda en un recorrido hacia las direcciones **dirPrincipal** y **dirSecundaria**.
    Parámetros:
    - dirPrincipal: Dirección / Primera dirección hacia dónde se moverá en el recorrido.
    - dirSecundaria: Dirección / Segunda dirección hacia dónde se moverá en el recorrido.
    Precondición:
    - **dirPrincipal** y **dirSecundaria** no pueden ser opuestas ni iguales.
    */
    if (puedeMover(dirPrincipal)) then {
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}

-------------------------------------------------------------------------------------------

function hayBolitas_Al_(color, direccion){
    /*
    Propósito: Indica si existe una celda hacia la dirección **direccion** y si la celda lindante hacia la dirección **dirección** posee bolitas del color **color**. 
    Parámetros: 
    - color: Color / color de las bolitas a ver.
    - direccion: Dirección / dirección hacia dónde mover el cabezal.
    Precondición: 
    - Ninguna.
    Tipo: Booleano.
    */
    return (puedeMover(direccion) && hayBolitas_EnCeldaAl_(color, direccion))
}

-------------------------------------------------------------------------------------------









