Ejercicio 1: 

procedure IrAlBorde_(direccion){
    /*
    Propósito:
    - Ubicar el cabezal en el borde de la dirección **dirección**.
    Parámetros:
    - direccion: Dirección / Dirección hacia la cual mover el cabezal al borde.
    Precondiciones: 
    - Ninguna.
    */
    while (puedeMover(direccion)) {
        Mover(direccion)
    }
}

Ejercicio 2: 

procedure SacarTodasLasDeColor_(colorASacar){
    /*
    Propósito: 
    - Sacar todas las bolitas del color **colorASacar** de la celda actual.
    Parámetros: 
    - colorASacar: Color / Color de las bolitas a sacar.
    Precondiciones:
    - Ninguna.
    */
    while (hayBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

Ejercicio 3: 

procedure VaciarFilaDe_(colorASacar){
    /*
    Propósito: 
    - Quitar todas las bolitas del color **colorASacar** de cada una de las celdas de la fila actual. El cabezal finaliza en la celda correspondiente al borde Este de la fila.
    Parámetros: 
    - colorASacar: Color / Color de las bolitas a sacar en la fila.
    Precondiciones: 
    - Ninguna.
    Observaciones: 
    - Es un recorrido de procesamiento sobre las celdas de la fila. Eliminando las bolitas del color **colorASacar** en cada celda de la fila.
    */
    IrAlBorde_(Oeste)
    SacarTodasLasDeColor_(colorASacar)
    while (puedeMover(Este)){
        Mover(Este)
        SacarTodasLasDeColor_(colorASacar)
    }
}

procedure IrAlBorde_(direccion){
    /*
    Propósito:
    - Ubicar el cabezal en el borde de la dirección **dirección**.
    Parámetros:
    - direccion: Dirección / Dirección hacia la cual mover el cabezal al borde.
    Precondiciones: 
    - Ninguna.
    */
    while (puedeMover(direccion)) {
        Mover(direccion)
    }
}

 

procedure SacarTodasLasDeColor_(colorASacar){
    /*
    Propósito: 
    - Sacar todas las bolitas del color **colorASacar** de la celda actual.
    Parámetros: 
    - colorASacar: Color / Color de las bolitas a sacar.
    Precondiciones:
    - Ninguna.
    */
    while (hayBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

Ejercicio 4: 

procedure VaciarFilaDe_HaciaEl_(colorASacar, direccion){
    /*
    Propósito: 
    - Quitar todas las bolitas del color **colorASacar** en una fila hacia la dirección **direccion** desde la celda actual. El cabezal finaliza en el borde de la dirección **direccion**
    Parámetros: 
    - colorASacar: Color / Color de las bolitas a quitar.
    - direccion: Dirección / Dirección hacia dónde quitar las bolitas del color **colorASacar**.
    Precondiciones: 
    - Ninguna.
    Observaciones: 
    - Es un recorrido de procesamiento sobre las celdas de la fila hacia la dirección **direccion**. Quitando todas las bolitas del color **colorASacar** de cada celda de la fila. 
    - La celda actual cuenta en la fila hacia **direccion**.
    */
    SacarTodasLasDeColor_(colorASacar)
    while (puedeMover(direccion)){
        Mover(direccion)
        SacarTodasLasDeColor_(colorASacar)
    }
}

procedure IrAlBorde_(direccion){
    /*
    Propósito:
    - Ubicar el cabezal en el borde de la dirección **dirección**.
    Parámetros:
    - direccion: Dirección / Dirección hacia la cual mover el cabezal al borde.
    Precondiciones: 
    - Ninguna.
    */
    while (puedeMover(direccion)) {
        Mover(direccion)
    }
}

 

procedure SacarTodasLasDeColor_(colorASacar){
    /*
    Propósito: 
    - Sacar todas las bolitas del color **colorASacar** de la celda actual.
    Parámetros: 
    - colorASacar: Color / Color de las bolitas a sacar.
    Precondiciones:
    - Ninguna.
    */
    while (hayBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}


Ejercicio 5: 

procedure VaciarTableroDe_(color){
    /*
    Propósito: Vaciar todo el tablero de las bolitas de color **color**, el cabezal puede finalizar en cualquier celda.
    Parámetros:
    - color: Color / color de las bolitas a sacar.
    Precondición: 
    - Ninguna.
    */
    IrAlBorde_(Oeste)
    IrAlBorde_(Sur)
    while (puedeMover(Norte)){
        VaciarHileraDe_HaciaEl_(color, Este)
        IrAlBorde_(Oeste)
        Mover_VecesAl_(1,Norte)
    }
        VaciarHileraDe_HaciaEl_(color, Este)
}

procedure Mover_VecesAl_ (cantidadAMover, direccionAMover){
    /*
    Propósito: Dado un número "cantidadAMover" y una dirección "direccionAMover", mover el cabezal tantas veces como el número dado hacia la direccón dada.
    Parámetros:
    - cantidadAMover: número / cantidad de celdas a mover el cabezal.
    - direccionAMover: dirección / dirección hacia dónde mover el cabezal.
    Precondiciones: Debe haber al menos tantas celdas como se indique en "cantidadAMover" hacia "direccionAMover"
    */   
    repeat (cantidadAMover){
        Mover(direccionAMover)
    }
}

procedure VaciarHileraDe_HaciaEl_(color, direccion){
    /*
    Propósito: Quitar todas las bolitas del color **color** de cada una de las celdas desde la celda actual hacia la dirección **dirección**. El cabezal puede finalizar en cualquier celda.
    Parámetros:
    - color: Color / color de las bolitas a sacar.
    - direccion: Dirección / Dirección hacia dónde quitar las bolitas de color **color**.
    Precondición:
    Ninguna.
    */
    while (puedeMover(direccion)) {
        SacarTodasLasDeColor_(color)
        Mover(direccion)
    }
    SacarTodasLasDeColor_(color)
}

procedure SacarTodasLasDeColor_(color){
    /*
    Propósito: Sacar todas las bolitas del color **color¨** de la celda actual.
    Parámetros:
    - color: Color / color de las bolitas a sacar.
    Precondición: 
    - Ninguna.
    */
    while (hayBolitas(color)) {
        Sacar(color)
    }
}

procedure IrAlBorde_ (direccion){
    /*
    Propósito: Dirigir el cabezal al borde de la dirección **direccion**.
    Parámetros: 
    - direccion: Dirección / Dirección hacia dónde se moverá el cabezal.
    Precondición:
    - Ninguna.
    */
    while (puedeMover(direccion)) {
        Mover (direccion)
    }
}

Ejercicio 6:

a) 

procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito:
    - Dirigir el cabezal hacia la primera celda en dónde se comenzará el recorrido de las direcciones **dirPrincipal** y **dirSecundaria**
    Parámetros:
    - dirPrincipal: Dirección / Primera dirección hacia dónde irá el recorrido.
    - dirSecundaria: Dirección / Segunda dirección hacia dónde irá el recorrido.
    Precondición:
    - Ninguna.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

b) 

function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito: 
    - Indica si hay una siguiente celda en un recorrido hacia las direcciones **dirPrincipal** y **dirSecundaria**.
    Parámetros:
    - dirPrincipal: Dirección / primera dirección a tener en cuenta si hay celdas.
    - dirSecundaria: Dirección / segunda dirección a tener en cuenta si hay celdas.
    Precondición:
    - Ninguna.
    Tipo: Booleano.
    */
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

c) 

procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito:
    - Dirigir el cabezal a la siguiente celda en un recorrido hacia las direcciones **dirPrincipal** y **dirSecundaria**.
    Parámetros:
    - dirPrincipal: Dirección / Primera dirección hacia dónde se moverá en el recorrido.
    - dirSecundaria: Dirección / Segunda dirección hacia dónde se moverá en el recorrido.
    Precondición:
    - **dirPrincipal** y **dirSecundaria** no pueden ser opuestas.
    */
    if (puedeMover(dirPrincipal)) then {
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}

Ejercicio 7:

a) 

procedure PintarTableroDe_(colorAPintar){
    /*
    Propósito: 
    - Pone una bolita en cada celda del tablero. El cabezal finaliza en la celda correspondiente a la esquina noreste.
    Parámetros: 
    - colorAPintar: Color / Color a poner bolitas en cada celda.
    Precondiciones:
    - Ninguna.
    Observaciones:
    - Es un recorrido de procesamiento sobre las celdas del tablero. Poniendo una bolita de color **colorAPintar** en cada celda del tablero.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    Poner(colorAPintar)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        Poner(colorAPintar)
    }
}

procedure Mover_VecesAl_ (cantidadAMover, direccionAMover){
    /*
    Propósito: Dado un número "cantidadAMover" y una dirección "direccionAMover", mover el cabezal tantas veces como el número dado hacia la direccón dada.
    Parámetros:
    - cantidadAMover: número / cantidad de celdas a mover el cabezal.
    - direccionAMover: dirección / dirección hacia dónde mover el cabezal.
    Precondiciones: Debe haber al menos tantas celdas como se indique en "cantidadAMover" hacia "direccionAMover"
    */   
    repeat (cantidadAMover){
        Mover(direccionAMover)
    }
}

procedure PintarHileraDe_HaciaEl_(color, direccion){
    /*
    Propósito: Poner una bolita del color **color** en cada una de las celdas hacia la dirección **dirección**. El cabezal puede finalizar en cualquier celda.
    Parámetros:
    - color: Color / color de las bolitas a sacar.
    - direccion: Dirección / Dirección hacia dónde quitar las bolitas de color **color**.
    Precondición:
    Ninguna.
    */
    while (puedeMover(direccion)) {
        Poner(color)
        Mover(direccion)
    }
    Poner(color)
}


procedure IrAlBorde_ (direccion){
    /*
    Propósito: Dirigir el cabezal al borde de la dirección **direccion**.
    Parámetros: 
    - direccion: Dirección / Dirección hacia dónde se moverá el cabezal.
    Precondición:
    - Ninguna.
    */
    while (puedeMover(direccion)) {
        Mover (direccion)
    }
}

b) 

procedure UnaDeCadaEnTodoElTablero(){
    /*
    Propósito: Colocar una bolita de cada color en cada celda del tablero. El cabezal puede finalizar en cualquier celda.
    Precondición:
    - Ninguna.
    */
    PintarTableroDe_(Rojo)
    PintarTableroDe_(Verde)
    PintarTableroDe_(Azul)
    PintarTableroDe_(Negro)
}

procedure PintarTableroDe_(color){
    /*
    Propósito: Poner una bolita del color **color** en cada celda 
        del tablero, el cabezal puede finalizar en cualquier celda.
    Parámetros:
    - color: Color / color de las bolitas a sacar.
    Precondición: 
    - Ninguna.
    */
    IrAlBorde_(Oeste)
    IrAlBorde_(Sur)
    while (puedeMover(Norte)){
        PintarHileraDe_HaciaEl_(color, Este)
        IrAlBorde_(Oeste)
        Mover_VecesAl_(1,Norte)
    }
        PintarHileraDe_HaciaEl_(color, Este)
}

procedure Mover_VecesAl_ (cantidadAMover, direccionAMover){
    /*
    Propósito: Dado un número "cantidadAMover" y una dirección "direccionAMover", mover el cabezal tantas veces como el número dado hacia la direccón dada.
    Parámetros:
    - cantidadAMover: número / cantidad de celdas a mover el cabezal.
    - direccionAMover: dirección / dirección hacia dónde mover el cabezal.
    Precondiciones: Debe haber al menos tantas celdas como se indique en "cantidadAMover" hacia "direccionAMover"
    */   
    repeat (cantidadAMover){
        Mover(direccionAMover)
    }
}

procedure PintarHileraDe_HaciaEl_(color, direccion){
    /*
    Propósito: Poner una bolita del color **color** en cada una de las celdas hacia la dirección **dirección**. El cabezal puede finalizar en cualquier celda.
    Parámetros:
    - color: Color / color de las bolitas a sacar.
    - direccion: Dirección / Dirección hacia dónde quitar las bolitas de color **color**.
    Precondición:
    Ninguna.
    */
    while (puedeMover(direccion)) {
        Poner(color)
        Mover(direccion)
    }
    Poner(color)
}


procedure IrAlBorde_ (direccion){
    /*
    Propósito: Dirigir el cabezal al borde de la dirección **direccion**.
    Parámetros: 
    - direccion: Dirección / Dirección hacia dónde se moverá el cabezal.
    Precondición:
    - Ninguna.
    */
    while (puedeMover(direccion)) {
        Mover (direccion)
    }
}

c) 

procedure RellenarCon_EnAusenciaDe_EnElTablero(colorAPoner, colorAMirar){
    /*
    Propósito: 
    - Pone una bolita de color **colorAPoner** en cada celda del tablero que no haya ninguna bolita del color **colorAMirar**. 
    Parámetros: 
    - colorAPoner: Color / Color de las bolitas a poner.
    - colorAMirar: Color / Color de las bolitas a observar si es que hay al menos una.
    Precondiciones:
    - Ninguna.
    Observaciones:
    - Es un recorrido de procesamiento sobre las celdas del tablero, poniendo una bolita del color **colorAPoner** en cada celda que no tenga nignuna bolita del color **colorAMirar**.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    PonerBolita_SiNoHay_(colorAPoner, colorAMirar)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        PonerBolita_SiNoHay_(colorAPoner, colorAMirar)
    }
}

procedure PonerBolita_SiNoHay_(colorAPoner, colorAMirar){
    /*
    Propósito: 
    - Poner una bolita del color **colorAPoner** en la celda actual si es que no hay ninguna bolita del color **colorAMirar**.
    Parámetros:
    - colorAPoner: Color / Color de las bolitas a poner.
    - colorAMirar: Color / Color de las bolitas a observar si es que hay al menos una.
    Precondiciones:
    - Ninguna.
    */
    if (not hayBolitas(colorAMirar)) then {
        Poner(colorAPoner)
    }
}

procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
    Propósito:
    - Dirigir el cabezal a la siguiente celda en un recorrido hacia las direcciones **dirPrincipal** y **dirSecundaria**.
    Parámetros:
    - dirPrincipal: Dirección / Primera dirección hacia dónde se moverá en el recorrido.
    - dirSecundaria: Dirección / Segunda dirección hacia dónde se moverá en el recorrido.
    Precondición:
    - **dirPrincipal** y **dirSecundaria** no pueden ser opuestas.
    */
    if (puedeMover(dirPrincipal)) then {
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}

procedure Poner_Si_ (color, condicion){
    /*
    Propósito: Poner una bolita de color **color** en la celda actual si la condición es verdadera.
    Parámetros:
    - color: color / color de la bolita a poner.
    - condicion: Booleano / condición para determinar si se pone o no la bolita.
    Precondición:
    - Ninguna.
    */
    if (condicion) then {
        Poner (color)
    }
}

procedure IrAlBorde_ (direccion){
    /*
    Propósito: Dirigir el cabezal al borde de la dirección **direccion**.
    Parámetros: 
    - direccion: Dirección / Dirección hacia dónde se moverá el cabezal.
    Precondición:
    - Ninguna.
    */
    while (puedeMover(direccion)) {
        Mover (direccion)
    }
}

d) 

procedure CompletarHasta_De_EnElTablero(cantidad, color){
    /*
    Propósito:
    - Poner en cada celda del tablero la cantidad **cantidad** de bolitas del color **color**. El cabezal finaliza en la celda correspondiente a la esquina noreste.
    Parámetros:
    - cantidad: Número / Cantidad de bolitas del color **color** a dejar en cada celda.
    - color: Color / Color de las bolitas a colocar en las celdas.
    Precondiciones:
    - Ninguna.
    Observaciones:
    - Es un recorrido de procesamiento sobre las celdas del tablero, poniendo bolitas del color **color** en cada celda de ser necesario.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    PonerBolitas_HastaHaber_(color, cantidad)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        PonerBolitas_HastaHaber_(color, cantidad)
    }
}

procedure PonerBolitas_HastaHaber_(color, cantidad){
    /*
    Propósito: 
    - Poner bolitas de color **color** en la celda actual hasta que haya la cantidad **cantidad** de bolitas. 
    Parámetrós:
    - cantidad: Número / Cantidad de bolitas del color **color** a dejar en la celda actual.
    - color: Color / Color de las bolitas a colocar en la celda actual.
    Precondiciones:
    - Ninguna.
    */
    while (nroBolitas(color) /= cantidad){
        Poner(color)
    }
}

Ejercicio 8) 

procedure IrHastaLaBolitaRojaHacia_(direccionABuscar){
    /*
    Propósito:
    - Deja el cabezal posicionado en la celda más próxima a la actual hacia la dirección **direccionABuscar** que posea una bolita del color rojo. 
    Parámetros: 
    - direccionABuscar: Dirección / Dirección hacia dónde mover el cabezal y buscar una celda con una bolita roja.
    Precondiciones:
    - Debe haber al menos una celda que contenga al menos una bolita roja hacia la dirección **direccionABuscar**.
    Observaciones:
    - Es un recorrido de búsqueda sobre las celdas de la fila, buscando una celda que tenga al menos una bolita roja.
    - Si en la celda actual hay una bolita roja, el cabezal no la cuenta y sigue el con su recorrido.
    */
    Mover(direccionABuscar)
    while (nroBolitas(Rojo) < 1){
        Mover(direccionABuscar)
    }
}

Ejercicio 9) 

procedure IrALaSiguienteVaciaHacia_(direccion){
    /*
    Propósito: 
    - Posicionar el cabezal sobre la celda vacía más cercana a la celda actual hacia la dirección **direccion**. En caso de no haber ninguna celda vacía, posicionar el cabezal sobre el borde de la dirección **direccion**.
    Parámetros:
    - direccion: Dirección / Dirección hacia dónde mover el cabezal.
    Precondiciones:
    - Ninguna.
    Observaciones:
    - Es un recorrido de búsqueda sobre las celdas de la fila, buscando una celda vacía.
    - En caso de que la celda actual esté vacía, no cuenta y el cabezal se mueve a la siguiente celda hacia la dirección **direccion**.
    */
    Mover(direccion)
    while (puedeMover(direccion) && not esCeldaVacia()){
        Mover(direccion)
    }
}

function esCeldaVacia(){
    /*
    Propósito: Indica si la celda actual está vacía.
    Precondición:
    - Ninguna
    Tipo: Booleano
    */
    return (not hayBolitas(Rojo) && not hayBolitas(Verde) && not hayBolitas(Azul) && not hayBolitas(Negro))
}

Ejercicio 10)

procedure IrHastaLaQueTengaUnaDeCada(){
    /*
    Propósito: 
    - Posicionar el cabezal sobre una celda que tenga al menos una bolita de cada color. 
    Precondiciones:
    - Ninguna.
    Observaciones:
    - Es un recorrido de búsqueda sobre las celdas del tablero, buscando una celda que tenga al menos una bolita de cada color.
    - En caso de no haber ninguna celda que cumpla la condición, hace Boom.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte) && not hayAlMenosUnaDeCada()){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    IrAlBorde(Oeste)
    Mover(Oeste)
}

Ejercicio 12) 

procedure ComerPiezaNegraConTorreHacia_(direccionAComer){
    /*
    Propósito: 
    - Comer la pieza negra más próxima a la celda actual hacia la dirección **direccionAComer**, dejando la torre blanca en la celda dónde se comió la pieza negra.
    Parámetros:
    - direccionAComer: Dirección / Dirección hacia dónde mover la torre blanca.
    Precondiciones:
    - El cabezal debe estar ubicado sobre una torre blanca.
    Observaciones:
    - Es un recorrido de procesamiento sobre las celdas de las filas, comiendo la pieza negra más próxima a la celda actual hacia la dirección **direccionAComer**.
    */
    MoverTorreBlancaHacia_(direccionAComer)
    while (not hayUnaPiezaNegra() && puedeMover(direccionAComer)){
        MoverTorreBlancaHacia_(direccionAComer)
    }
    ComerPiezaNegra()
}

function hayUnaPiezaNegra()
/*
PROPÓSITO: Indica si hay una pieza negra en la
celda actual.
TIPO: Booleano
PRECONDICIONES:
* Ninguna
*/

procedure ComerPiezaNegra()
/*
PROPÓSITO: Come la pieza negra en la celda actual.
PRECONDICIONES:
* Hay una pieza negra en la celda actual
*/

procedure MoverTorreBlancaHacia_(direcciónAMover)
/*
PROPÓSITO: Mueve la torre blanca una celda en la
dirección dada.
PARÁMETROS:
* direcciónAMover: Dirección - La dirección
hacia la cual mover la pieza.
PRECONDICIONES:
* Hay una celda en la dirección dada.
*/

Ejercicio 13)

a) 

CENTRAL

function esDepositoCentral(){
    /*
    Propósito: 
    - Indica si el cabezal se encuentra sobre la celda correspondiente al deposito central.
    Precondiciones:
    - Ninguna.
    Tipo: 
    - Booleano.
    */
    return (nroBolitas(Negro)==3)
}

LOCAL

function esDepositoLocal(){
    /*
    Propósito: 
    - Indica si el cabezal se encuentra sobre la celda correspondiente a un deposito local.
    Precondiciones:
    - Ninguna.
    Tipo: 
    - Booleano.
    */
    return (nroBolitas(Negro)==2)
}

b) 

procedure IrDeCentralAlLocal_(direccion){
    /*
    Propósito:
    - Mover el cabezal a la celda correspondiente al deposito local de la dirección **direccion**. El cabezal finaliza en la celda dónde se ubique el deposito local.
    Parámetros:
    - direccion: Dirección / Dirección hacia dónde mover el cabezal.
    Precondiciones:
    - El cabezal debe estar ubicado sobre la celda correspondiente al deposito central.
    Observaciones:
    - Es un recorrido de búsqueda sobre las celdas de la fila, buscando el deposito local.
    */
    Mover(direccion)
    while (not esDepositoLocal() && puedeMover(direccion)){
        Mover(direccion)
    }
}

c) 

procedure IrDelLocal_ACentral(direccion){
    /*
    Propósito:
    - Dirigir el cabezal hacia la celda correspondiente al deposito central. El cabezal finaliza en la celda correspondiente al deposito central.
    Parámetros:
    - direccion: Dirección / Dirección hacia dónde mover el cabezal.
    Precondiciones:
    - El cabezal debe estar ubicado sobre la celda que corresponda al deposito local de la dirección **direccion**.
    Observaciones:
    - Es un recorrido de búsqueda sobre las celdas de la fila, buscando la celda correspondiente al deposito central.
    */
    Mover(opuesto(direccion))
    while (not esDepositoCentral() && puedeMover(opuesto(direccion))){
        Mover(opuesto(direccion))
    }
}

d) 

procedure Llevar_MercaderiasAlLocal_(cantidad, direccion){
    /*
    Propósito:
    - LLeva la cantidad **cantidad** de mercadería del deposito central al deposito local que se encuentra ubicado hacia la dirección **direccion**. Si en el deposito central hay menor cantidad de mercadería que la indicada en **cantidad**, entonces no se hace nada.
    Parámetros:
    - cantidad: Número / Cantidad de mercadería a mover.
    - direccion: Dirección / Dirección hacia dónde mover el cabezal.
    Precondiciones:
    - El cabezal debe estar ubicado sobre la celda correspondiente al deposito central.
    Observaciones:
    - Es un recorrido de procesamiento sobre las celdas de la fila, llevando la mercadería del deposito central al deposito local de la dirección **direccion**.
    */
    if (nroBolitas(Azul) >= cantidad) then {
        Sacar_DeColor_(cantidad, Azul)
        while (puedeMover(direccion) && not esDepositoLocal()){
            Mover(direccion)
        }
        Poner_DeColor_(cantidad, Azul)
    }
}

e) 

procedure Traer_MercaderiasDelLocal_(cantidad, direccion){
    /*
    Propósito: 
    - Llevar la cantidad **cantidad** de mercadería del deposito local de la dirección **direccion** hacia el deposito central. Si en el deposito local de la dirección **direccion** hay menos cantidad de mercadería de la indicada en **cantidad**, entonces no ocurre nada. El cabezal finaliza en la celda del deposito central, y si no ocurre nada, finaliza en la celda del deposito local de la dirección **direccion**.
    Parámetros: 
    - cantidad: Número / Cantidad de mercadería a llevar del deposito local de la dirección **direccion** al deposito central.
    - direccion: Dirección / Dirección del deposito local.
    Precondiciones:
    - El cabezal se encuentra en la celda correspondiente al deposito local de la dirección **direccion**.
    Observaciones:
    - Es un recorrido de procesamiento sobre las celdas de la fila, moviendo la mercadería del deposito local al deposito central.
    */
    if (nroBolitas(Azul) >= cantidad) then {
        Sacar_DeColor_(cantidad, Azul)
        while (puedeMover(opuesto(direccion)) && not esDepositoCentral()){
            Mover(opuesto(direccion))
        }
        Poner_DeColor_(cantidad, Azul)
    }
}

f) 

procedure Mover_MercaderiasDelLocal_AlLocal_(cantidad, origen, destino){
    /*
    Propósito:
    - Mover la cantidad **cantidad** de mercaderías del deposito local con dirección **origen** al deposito local con dirección **destino**. Si en el deposito de la dirección **origen** hay menor cantidad de mercadería que **cantidad**, no se hace nada. El cabezal finaliza en la celda correspondiente al deposito central.
    Parámetros:
    - cantidad: Número / Cantidad de mercadería a mover.
    - origen: Dirección / Dirección del deposito local de origen.
    - destino: Dirección / Dirección del deposito local de destino.
    Precondiciones:
    - El cabezal debe estár ubicado en la celda correspondiente al deposito central. 
    */
    IrDeCentralAlLocal_(origen)
    if (nroBolitas(Azul) >= cantidad) then {
        Sacar_DeColor_(cantidad, Azul)
        IrDelLocal_ACentral(origen)
        IrDeCentralAlLocal_(destino)
        Poner_DeColor_(cantidad, Azul)
        IrDelLocal_ACentral(destino)
    } 
    elseif (nroBolitas(Azul) < cantidad) {
        IrDelLocal_ACentral(origen)
    }
}

Ejercicio 14)

a) 

function colorCaminante(){
    /*
    Propósito:
    - Indica el color del caminante.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano. 
    */
    return (Azul)
}

function colorIndicador(){
    /*
    Propósito:
    - Indica el color del indicador. 
    Precondiciones:
    - Ninguna.
    Tipo: 
    - Booleano.
    */
    return (Verde)
}

function colorHuella(){
    /*
    Propósito:
    - Indica el color de la huella.
    Precondiciones:
    - Nignuna.
    Tipo: 
    - Booleano.
    */
    return (Negro)
}

function colorMeta(){
    /*
    Propósito:
    - Indica el color de la meta.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (Rojo)
}

b) 

c)

function estaEnLaMeta(){
    /*
    Propósito:
    - Indica si el caminante está o no en la meta.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (colorMeta())
}

d)

procedure DejarHuella(){
    /*
    Propósito:
    - Deja una huella en la celda actual.
    Precondiciones:
    - Ninguna.
    Observaciones:
    - La huella se ve representada como una bolita de color negro.
    */
    Poner(Negro)
}

e)

f) 

procedure CambiarDeDireccionSiHayIndicador(){
    /*
    Propósito:
    - Cambia la dirección del caminante cuando se encuentra con un indicador, dejando una bolita azul si hay una bolita verde, dos bolitas azules si hay 2 bolitas verdes, 3 bolitas azules si hay 3 bolitas verdes y cuatro bolitas azules si hay 4 bolitas verdes. 
    Precondiciones:
    - Debe haber al menos una bolita de color verde.
    - El número de bolitas verdes no puede ser mayor a 4.
    */
    if (hayIndicadorDeCambioDeDireccion()) then {
        CambiarDireccionDelCaminanteALaDelIndicador()
    }
}

g)

procedure MoverAlCaminanteHaciaDondeMira(){
    /*
    Propósito:
    - Mover el caminante un paso en la dirección hacia la cual está mirando.
    Precondiciones:
    - Debe haber al menos una bolita de color negro en la celda actual.
    - Las bolitas de color negro de la celda actual no deben ser mayor a 4.
    */
    if (nroBolitas(Negro) == 1) then {
        SacarTodasLasDeColor_(Negro)
        Mover(Norte)
        Poner(Negro)
    }
    elseif (nroBolitas(Negro) == 2) {
        SacarTodasLasDeColor_(Negro)
        Mover(Este)
        Poner_DeColor_(2, Negro)
    }
    elseif (nroBolitas(Negro) == 3) {
        SacarTodasLasDeColor_(Negro)
        Mover(Sur)
        Poner_DeColor_(3, Negro)
    }
    else {
        SacarTodasLasDeColor_(Negro)
        Mover(Oeste)
        Poner_DeColor_(4, Negro)
    }
}

h)

function hayIndicadorDeCambioDeDireccion(){
    /*
    Propósito:
    Indica si en la celda actual hay un indicador de dirección.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (hayBolitas(Verde))
}

i)

procedure CambiarDireccionDelCaminanteALaDelIndicador(){
    /*
    Propósito:
    - Cambia la dirección del caminante dependiendo del indicador, dejando una bolita azul si hay una bolita verde, dos bolitas azules si hay 2 bolitas verdes, 3 bolitas azules si hay 3 bolitas verdes y cuatro bolitas azules si hay 4 bolitas verdes. 
    Precondiciones:
    - Debe haber al menos una bolita de color verde.
    - El número de bolitas verdes no puede ser mayor a 4.
    */
    if (nroBolitas(Verde) == 1) then {
        SacarTodasLasDeColor_(Negro)
        Poner(Negro)
    }
    elseif (nroBolitas(Verde) == 2) {
        SacarTodasLasDeColor_(Negro)
        Poner_DeColor_(2, Negro)
    }
    elseif (nroBolitas(Verde) == 3) {
        SacarTodasLasDeColor_(Negro)
        Poner_DeColor_(3, Negro)
    }
    else {
        SacarTodasLasDeColor_(Negro)
        Poner_DeColor_(4, Negro)
    }
}

j)

procedure MoverAlCaminanteAl_(direccion){
    /*
    Propósito:
    - Mover al caminante un paso a la dirección **direccion**. El cabezal finaliza en la celda lindante a la celda actual hacia la dirección **direccion**.
    Parámetros:
    - direccion: Dirección / Dirección hacia dónde mover al caminante.
    Precondiciones:
    - Debe haber al menos una bolita de color negro en la celda actual.
    - Debe haber al menos una celda hacia la dirección **dirección**.
    */
    if (nroBolitas(Negro) == 1) then {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(1, Negro)
    }
    elseif (nroBolitas(Negro) == 2) {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(2, Negro)
    }
    elseif (nroBolitas(Negro) == 3) {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(3, Negro)
    }
    else {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(4, Negro)
    }
}

k)
 
------------------------------------------------------------------------------------------------

RESTO DEL EJERCICIO 14)

program {
    
}


//C
function estaEnLaMeta(){
    /*
    Propósito:
    - Indica si el caminante está o no en la meta.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (colorMeta())
}

//D
procedure DejarHuella(){
    /*
    Propósito:
    - Deja una huella en la celda actual.
    Precondiciones:
    - Ninguna.
    Observaciones:
    - La huella se ve representada como una bolita de color negro.
    */
    Poner(Negro)
}

//E
procedure DarUnPaso(){
    /*
    Propósito:
    - Dar un paso en el paseo del caminante. 
    */
}

//F
procedure CambiarDeDireccionSiHayIndicador(){
    /*
    Propósito:
    - Cambia la dirección del caminante cuando se encuentra con un indicador, dejando una bolita azul si hay una bolita verde, dos bolitas azules si hay 2 bolitas verdes, 3 bolitas azules si hay 3 bolitas verdes y cuatro bolitas azules si hay 4 bolitas verdes. 
    Precondiciones:
    - Debe haber al menos una bolita de color verde.
    - El número de bolitas verdes no puede ser mayor a 4.
    */
    if (hayIndicadorDeCambioDeDireccion()) then {
        CambiarDireccionDelCaminanteALaDelIndicador()
    }
}

//G
procedure MoverAlCaminanteHaciaDondeMira(){
    /*
    Propósito:
    - Mover el caminante un paso en la dirección hacia la cual está mirando.
    Precondiciones:
    - Debe haber al menos una bolita de color negro en la celda actual.
    - Las bolitas de color negro de la celda actual no deben ser mayor a 4.
    */
    if (nroBolitas(Negro) == 1) then {
        SacarTodasLasDeColor_(Negro)
        Mover(Norte)
        Poner(Negro)
    }
    elseif (nroBolitas(Negro) == 2) {
        SacarTodasLasDeColor_(Negro)
        Mover(Este)
        Poner_DeColor_(2, Negro)
    }
    elseif (nroBolitas(Negro) == 3) {
        SacarTodasLasDeColor_(Negro)
        Mover(Sur)
        Poner_DeColor_(3, Negro)
    }
    else {
        SacarTodasLasDeColor_(Negro)
        Mover(Oeste)
        Poner_DeColor_(4, Negro)
    }
}

//H
function hayIndicadorDeCambioDeDireccion(){
    /*
    Propósito:
    Indica si en la celda actual hay un indicador de dirección.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (hayBolitas(Verde))
}

//I
procedure CambiarDireccionDelCaminanteALaDelIndicador(){
    /*
    Propósito:
    - Cambia la dirección del caminante dependiendo del indicador, dejando una bolita azul si hay una bolita verde, dos bolitas azules si hay 2 bolitas verdes, 3 bolitas azules si hay 3 bolitas verdes y cuatro bolitas azules si hay 4 bolitas verdes. 
    Precondiciones:
    - Debe haber al menos una bolita de color verde.
    - El número de bolitas verdes no puede ser mayor a 4.
    */
    if (nroBolitas(Verde) == 1) then {
        SacarTodasLasDeColor_(Negro)
        Poner(Negro)
    }
    elseif (nroBolitas(Verde) == 2) {
        SacarTodasLasDeColor_(Negro)
        Poner_DeColor_(2, Negro)
    }
    elseif (nroBolitas(Verde) == 3) {
        SacarTodasLasDeColor_(Negro)
        Poner_DeColor_(3, Negro)
    }
    else {
        SacarTodasLasDeColor_(Negro)
        Poner_DeColor_(4, Negro)
    }
}

//J
procedure MoverAlCaminanteAl_(direccion){
    /*
    Propósito:
    - Mover al caminante un paso a la dirección **direccion**. El cabezal finaliza en la celda lindante a la celda actual hacia la dirección **direccion**.
    Parámetros:
    - direccion: Dirección / Dirección hacia dónde mover al caminante.
    Precondiciones:
    - Debe haber al menos una bolita de color negro en la celda actual.
    - Debe haber al menos una celda hacia la dirección **dirección**.
    */
    if (nroBolitas(Negro) == 1) then {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(1, Negro)
    }
    elseif (nroBolitas(Negro) == 2) {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(2, Negro)
    }
    elseif (nroBolitas(Negro) == 3) {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(3, Negro)
    }
    else {
        SacarTodasLasDeColor_(Negro)
        Mover(direccion)
        Poner_DeColor_(4, Negro)
    }
}

//K
procedure Cambiar_ParaImitar_(colorACambiar, colorAImitar){
    /*
    
    */
}

procedure Poner_DeColor_(cantidadAPoner, colorAPoner){
    /*
    Propósito: Dado un número "cantidadAPoner" y un color "colorAPoner", poner tantas bolitas de un determinado color en la celda actual.
    Parámetros:
    - cantidadAPoner: número / cantidad de bolitas rojas a poner.
    - colorAPoner: color / color de las bolitas a poner.
    Precondiciones: Ninguna.
    */
    repeat (cantidadAPoner){
        Poner(colorAPoner)
    }
}

procedure SacarTodasLasDeColor_ (colorASacar){
    /*
    Propósito: Sacar todas las bolitas del color **colorASacar** de la celda actual. 
    Parámetros:
    - colorASacar: Color / color de las bolitas a sacar.
    Precondiciones:
    Ninguna.
    */
    repeat(nroBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

function colorCaminante(){
    /*
    Propósito:
    - Indica el color del caminante.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano. 
    */
    return (Azul)
}

function colorIndicador(){
    /*
    Propósito:
    - Indica el color del indicador. 
    Precondiciones:
    - Ninguna.
    Tipo: 
    - Booleano.
    */
    return (Verde)
}

function colorHuella(){
    /*
    Propósito:
    - Indica el color de la huella.
    Precondiciones:
    - Nignuna.
    Tipo: 
    - Booleano.
    */
    return (Negro)
}

function colorMeta(){
    /*
    Propósito:
    - Indica el color de la meta.
    Precondiciones:
    - Ninguna.
    Tipo:
    - Booleano.
    */
    return (Rojo)
}








