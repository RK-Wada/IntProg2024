Ejercicio 1:

a) 

function totalDeBolitas(){
    /*
    Propósito: Indica la cantidad de bolitas total de la celda actual.
    Precondición: 
    - Ninguna.
    Tipo: Número. 
    */
    return (nroBolitas(Rojo) + nroBolitas(Verde) + nroBolitas Azul + nroBolitas (Negro))
}

b) 

function masDe5BolitasTotales(){
    /*
    Propósito: Indica si en la celda actual hay más de 5 bolitas en total.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (nroBolitas(Rojo) + nroBolitas(Verde) + nroBolitas Azul + nroBolitas (Negro) > 5)
}

c) 

function hay5BolitasTotales(){
    /*
    Propósito: Indica si en la celda actual hay exactamente 5 bolitas en total.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (nroBolitas(Rojo) + nroBolitas(Verde) + nroBolitas Azul + nroBolitas (Negro) == 5)
}

d)

function hayAlMenos5BolitasTotales(){
    /*
    Propósito: Indica si en la celda actual hay al menos 5 bolitas en total.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (nroBolitas(Rojo) + nroBolitas(Verde) + nroBolitas Azul + nroBolitas (Negro) >= 5)
}

e) 

function hayAlMenosUnaDeCada(){
    /*
    Propósito: Indica si en la celda actual hay al menos 1 bolita de cada color.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (hayBolitas(Rojo) && hayBolitas(Verde) && hayBolitas(Negro) && hayBolitas(Azul))
}

f) 

function estaVacia(){
    /*
    Propósito: Indica si la celda actual está vacia.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (not hayBolitas(Rojo) && not hayBolitas(Verde) && not hayBolitas(Negro) && not hayBolitas(Azul))
}

g)

function faltaAlgunaBolita(){
    /*
    Propósito: Indica si a la celda actual le falta algún color de bolitas. 
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (not hayBolitas(Rojo) || not hayBolitas(Verde) || not hayBolitas(Negro) || not hayBolitas(Azul))
}

Ejercicio 2:

a) 

function esCeldaVacia(){
    /*
    Propósito: Indica si la celda actual está vacía.
    Precondición:
    - Ninguna
    Tipo: Booleano
    */
    return (not hayBolitas(Rojo) && not hayBolitas(Verde) && not hayBolitas(Azul) && not hayBolitas(Negro)
}

b)

function hayAlMenosUnaDeCada(){
    /*
    Propósito: Indica si en la celda actual hay al menos 1 bolita de cada color.
    Precondición: 
    - Ninguna.
    Tipo: Booleano. 
    */
    return (hayBolitas(Rojo) && hayBolitas(Verde) && hayBolitas(Negro) && hayBolitas(Azul))
}

c) 

function esCeldaConBolitas(){
    /*
    Propósito: Indica si la celda actual hay al menos una bolita de cualquier color.
    Precondición:
    - Ninguna
    Tipo: Booleano
    */
    return (hayBolitas(Rojo) || hayBolitas(Verde) || hayBolitas(Azul) || hayBolitas(Negro))
}


Ejercicio 3:

a) 

function cantidadDeSoldadosDe_(colorDelEjercito){
    /*
    Propósito: Indica la cantidad de soldados de la celda actual del ejercito **colorDelEjercito**.
    Parámetros: 
    - colorDelEjercito: color / color del ejercito.
    Precondición:
    Tipo: Número
    */
    return (nroBolitas(colorDelEjercito))
}

b)

DUPLICAR ENEMIGOS:


procedure EnviarAliadosParaDuplicarEnemigos(){
    /*
    Propósito: Agregar el doble de soldados aliados que de soldados enemigos en la celda actual.
    Precondiciones:
    - Ninguna.
    Aclaraciones:
    - Los soldados aliados son representados como bolitas negras.
    - Los soldados enemigos son representados como bolitas rojas. 
    */
    repeat (cantidadDeSoldadosDe_(Rojo)*2 - cantidadDeSoldadosDe_(Negro)){
        Poner (Negro)
    }
}

function cantidadDeSoldadosDe_(colorDelEjercito){
    /*
    Propósito: Indica la cantidad de soldados de la celda actual del ejercito **colorDelEjercito**.
    Parámetros: 
    - colorDelEjercito: color / color del ejercito.
    Precondición:
    Tipo: Número
    */
    return (nroBolitas(colorDelEjercito))
}

PELEAR LA BATALLA:

procedure PelearLaBatalla(){
    /*Proposito: 
    Simular una batalla estre soldados aliados y soldados enemigos en la celda actual.
    Precondición: 
    Hay suficiente cantidad de soldados aliados como para ganar la batalla. 
    OBSERVACION: 
    Durante una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos mueren. Es decir, 3 soldados alidados son igual a 2 enemigos.
    */ 
    repeat (cantidadDeSoldadosDe_(Rojo) div 2){
    if (cantidadDeSoldadosDe_(Rojo) >= 2 && (cantidadDeSoldadosDe_(Negro) >= 3)) then {
            PeleaDe3A2()
        }
    }
}

procedure PeleaDe3A2(){
    /*
    Propósito: Simular una pelea entre 2 soldados enemigos y 3 soldados aliados, quitando a todos de la celda actual.
    Precondiciones: 
    - Debe haber al menos 2 soldados enemigos en la celda actual.
    - Debe haber al menos 3 soldados aliados en la celda actual.
    */
    repeat (3){
        Sacar (Negro)  
    }
    Sacar (Rojo)
    Sacar (Rojo)
}


function cantidadDeSoldadosDe_(colorDelEjercito){
    /*
    Propósito: Indica la cantidad de soldados de la celda actual del ejercito **colorDelEjercito**.
    Parámetros: 
    - colorDelEjercito: color / color del ejercito.
    Precondición:
    Tipo: Número
    */
    return (nroBolitas(colorDelEjercito))
}

c) 

function esCeldaIndefensa(){
    /*
    Propósito: Indica si la celda actual no tiene soldados aliados.
    Precondición:
    - Ninguna.
    Tipo: Booleano.
    */
    return (cantidadDeSoldadosDe_(Negro) == 0)
}

function cantidadDeSoldadosDe_(colorDelEjercito){
    /*
    Propósito: Indica la cantidad de soldados de la celda actual del ejercito **colorDelEjercito**.
    Parámetros: 
    - colorDelEjercito: color / color del ejercito.
    Precondición:
    Tipo: Número
    */
    return (nroBolitas(colorDelEjercito))
}

d) 

function estadoDeEmergencia(){
    /*
    Propósito: Indica si existen más de 100 soldados enemigos en la celda actual y, además, la celda está indefensa.
    Precondición:
    Tipo: Booleano
    */
    return (cantidadDeSoldadosDe_(Rojo) > 100 && esCeldaIndefensa())
}

function esCeldaIndefensa(){
    /*
    Propósito: Indica si la celda actual no tiene soldados aliados.
    Precondición:
    - Ninguna.
    */
    return (cantidadDeSoldadosDe_(Negro) == 0)
}

function cantidadDeSoldadosDe_(colorDelEjercito){
    /*
    Propósito: Indica la cantidad de soldados de la celda actual del ejercito **colorDelEjercito**.
    Parámetros: 
    - colorDelEjercito: color / color del ejercito.
    Precondición:
    Tipo: Número
    */
    return (nroBolitas(colorDelEjercito))
}

e) 

function hayAlMenos_AliadosPorCada_Atacantes(cantidadDefensa, cantidadAtaque){
    /*
    Propósito: Indica si hay por lo menos **cantidadDefensa** soldados aliados por cada **cantidadAtaque** soldados enemigos en la celda actual.
    Parámetros: 
    - cantidadDefensa: Número / cantidad de soldados aliados defendiendo.
    - cantidadAtaque: Número / cantidad de soldados enemigos atacando.
    Precondición:
    - Ninguna.
    Tipo: Booleano.
    */
    return (cantidadDefensa >= cantidadAtaque * 2)
}

f) 

function aliadosNecesariosParaDefensaEficazContra_(cantidadDeSoldadosEnemigosAdicionales){
    /*
    Propósito: Indica la cantidad de soldados aliados necesarios para una defensa eficaz. 
    Parámetros: 
    - cantidadDeSoldadosEnemigosAdicionales: Número / cantidad de soldados enemigos adicionales.
    Precondición:
    - Ninguna.
    Tipo: Número.
    */
    return (cantidadDeSoldadosDe_(Negro) * 3 div cantidadDeSoldadosDe_(Rojo) * 2))
}


function cantidadDeSoldadosDe_(colorDelEjercito){
    /*
    Propósito: Indica la cantidad de soldados de la celda actual del ejercito **colorDelEjercito**.
    Parámetros: 
    - colorDelEjercito: color / color del ejercito.
    Precondición:
    Tipo: Número
    */
    return (nroBolitas(colorDelEjercito))
}

Ejercicio 4: 

a) 

function sePuedeAterrizarA_Hacia_(distanciaAPlaneta, direccionAPlaneta){
    /*
    Propósito: Indica si hay un planeta a **distanciaAPlaneta** en la dirección **direccionAPLaneta** y si el combustible es suficiente para llegar al mismo.
    Parámetros:
    - distanciaAPlaneta: Número / distancia hacia el planeta.
    - direccionAPlaneta: Dirección / Dirección hacia el próximo planeta.
    Precondición: 
    - El cabezal se encuentra sobre la nave.
    - Debe haber al menos **distanciaAPlaneta** celdas en la dirección **direecionAPlaneta**.
    Tipo: Booleano.
    */
    return (hayUnPlanetaA_Hacia_(distancia, dirección) && combustibleRestante()>= distanciaAPlaneta)
}

b)

function hayUnPlanetaRecto(){
    /*
    Propósito: Indica que existe un planeta en cualquiera de las direcciones, a cualquier distancia de la nave.
    Precondición: 
    - El cabezal se encuentra sobre la nave y a exactamente 3 celdas de distancia de todos los bordes.
    Tipo: Booleano.
    */
    return (hayUnPlanetaA_Hacia_(distancia, dirección))
}

Ejercicio 5:

a) 

ARBOL

function arbol(){
    /*
    Propósito:
    - Indica que un árbol es representado con el color verde.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Verde))
}

SEMILLA

function semilla(){
    /*
    Propósito:
    - Indica que una semilla es representada con el color rojo.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Rojo))
}

BOMBA

function bomba(){
    /*
    Propósito:
    - Indica que una bomba es representada con el color negro.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Negro))
}

NUTRIENTE

function nutriente(){
    /*
    Propósito:
    - Indica que un nutriente es representado con el color Azul.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Azul))
}

b) 

procedure GerminarSemilla(){
    /*
    Propósito: Transforma una semilla en un árbol en la celda actual. La germinación consume tres unidades de nutrientes. Si la celda no tiene semilla o no hay suficientes nutrientes, no se hace nada.
    Precondición: 
    - Ninguna.
    */
    if (nutriente()>= 3 && semilla()>=1) then {
        Sacar(Azul)
        Sacar(Azul)
        Sacar(Azul)
        Sacar(Rojo)
        Poner(Verde)
    }
}

function arbol(){
    /*
    Propósito:
    - Indica que un árbol es representado con el color verde.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Verde))
}

function semilla(){
    /*
    Propósito:
    - Indica que una semilla es representada con el color rojo.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Rojo))
}

function nutriente(){
    /*
    Propósito:
    - Indica que un nutriente es representado con el color Azul.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Azul))
}

c) 

procedure AlimentarArboles(){
    /*
    Propósito: Alimentar los árboles de la celda actual, consumiento un nutriente cada uno. Si hay menos nutrientes de lo que se necesita, se consumen todos los que hay.
    Precondición: 
    - Ninguna.
    */
    if (nutriente() >= arbol()) then {
        repeat (arbol()){
            Sacar(Azul)
        }
            }
            else  {
                SacarTodasLasDeColor_(Azul)
    }
}

function nutriente(){
    /*
    Propósito:
    - Indica que un nutriente es representado con el color Azul.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Azul))
}

function arbol(){
    /*
    Propósito:
    - Indica que un árbol es representado con el color verde.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Verde))
}

procedure SacarTodasLasDeColor_ (colorASacar){
    /*
    Propósito: Sacar todas las bolitas del color **colorASacar** de la celda actual. 
    Parámetros:
    - colorASacar: Color / color de las bolitas a sacar.
    Precondiciones:
    Ninguna.
    */
    repeat(nroBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

d) 

procedure ExplotarBomba(){
    /*
    Propósito: Explotar una bomba en la celda actual, eliminando 5 árboles en la celda actual y 3 en la celda lindante al norte. Si la celda actual se encuentra en el borde Norte, solo se eliminan los árboles de la celda actual. Y, si hay menos árboles de los que la bomba puede eliminar, entonces se elimina los que haya. La bomba desaparece en el proceso. El cabezal retorna y finaliza en la celda inicial.
    Precondición: 
    - Debe haber al menos una bomba en la celda actual.
    */
    if (puedeMover(Norte) && arbol() >= 5) then {
        Mover_VecesAl_ (1, Norte)
        ExplotarArbolesAlNorteSiEsNecesario()
        Mover_VecesAl_ (1, Sur)
        Sacar_DeColor_ (5, Verde)
        Sacar_DeColor_ (1, Negro)
    }
        elseif (puedeMover(Norte) && arbol() < 5){
            Mover_VecesAl_ (1, Norte)
            ExplotarArbolesAlNorteSiEsNecesario()
            Mover_VecesAl_ (1, Sur)
            SacarTodasLasDeColor_(Verde)
            Sacar_DeColor_ (1, Negro)
        }
}

procedure ExplotarArbolesAlNorteSiEsNecesario(){
    /*
    Propósito: Explotar 3 árboles en la celda lindante al Norte de la celda actual si es que tiene al menos 3 árboles en ella. Sino, no hace nada.
    Precondición: 
    - Ninguna.
    */
    if (arbol() >= 3) then {
        Sacar_DeColor_ (3, Verde)
    }
        elseif (arbol() < 3) then {
            SacarTodasLasDeColor_(Verde)
        }
}

function arbol(){
    /*
    Propósito:
    - Indica que un árbol es representado con el color verde.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Verde))
}

function bomba(){
    /*
    Propósito:
    - Indica que una bomba es representada con el color negro.
    Precondición: 
    - Ninguna.
    Tipo: Color.
    */
    return (nroBolitas(Negro))
}

procedure SacarTodasLasDeColor_ (colorASacar){
    /*
    Propósito: Sacar todas las bolitas del color **colorASacar** de la celda actual. 
    Parámetros:
    - colorASacar: Color / color de las bolitas a sacar.
    Precondiciones:
    Ninguna.
    */
    repeat(nroBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

procedure Sacar_DeColor_ (cantidadASacar, colorASacar){
    /*
    Propósito: Dado un número "cantidadASacar" y un color "colorASacar", saque tantas bolitas como se indica del color que se especifique en la celda actual.
    Parámetros: 
    - cantidadASacar: número / cantidad de bolitas a sacar.
    - colorASacar: color / color de las bolitas a sacar.
    Precondiciones: Debe haber tantas bolitas como "cantidadASacar" del color "colorASacar" en la celda actual.
    */
    repeat(cantidadASacar){
        Sacar(colorASacar)
    }
}

procedure Mover_VecesAl_ (cantidadAMover, direccionAMover){
    /*
    Propósito: Dado un número "cantidadAMover" y una dirección "direccionAMover", mover el cabezal tantas veces como el número dado hacia la direccón dada.
    Parámetros:
    - cantidadAMover: número / cantidad de celdas a mover el cabezal.
    - direccionAMover: dirección / dirección hacia dónde mover el cabezal.
    Precondiciones: Debe haber al menos tantas celdas como se indique en "cantidadAMover" hacia "direccionAMover"
    */   
    repeat (cantidadAMover){
        Mover(direccionAMover)
    }
}

e) 






