//GOBSMART

type Producto is record{
    /* PROP: modelar productos
    INV.REP.: 
    - precio > 0 */
    field nombre // String
    field marca // String
    field precio // Número
}

type Cliente is record {
    /* PROP: modelar clientes */
    field dni // String
    field tipoDePago // TipoDePago
    field productos // [Producto]
}

type Caja is record {
    /* PROP: modelar cajas
    INV.REP.: 
    - número > 0
    - facturado >= 0 */
    field número // Número
    field clientesEsperando // [Cliente]
    field aceptaPagos // [TipoDePago]
    field esRápida // Bool
    field facturado // Número
}

type TipoDePago is variant {
    /* PROP: modelar Tipos de pago aceptados */
    case Tarjeta {}
    case MartPago {}
    case Efectivo {}
}

//Funciones
//a
function cantidadDeClientesEsperandoEn_(caja){
    /*
    Propósito:
    - Indica la cantidad de clientes que están esperando en la caja **caja**.
    Parámetros:
    - caja: Caja
    Precondiciones:
    - Ninguna.
    Tipo:
    - Número.
    Observaciones:
    - Es un recorrido de acumulación sobre la lista "clientesEsperando" de **caja**.
    */
    cantidadClientesEsperando := 0
    cajaActual := clientesEsperando(caja)
    while (not esVacia(cajaActual)) {
        cantidadClientesEsperando := cantidadClientesEsperando + 1
        cajaActual := resto(cajaActual)
    }
    return (cantidadClientesEsperando)
}

//b
function cajaMenosOcupadaDe_(listaDeCajas){
    /*
    Propósito:
    - Describe la caja de **listaDeCajas** con menos clientes esperando.
    Parámetros:
    - listaDeCajas: [Caja]
    Precondiciones:
    - La lista **listaDeCajas** debe tener al menos una caja dentro.
    Tipo:
    - Caja.
    Observaciones:
    - Es un recorrido de máximos y mínimos sobre las cajas dentro de la lista **listaDeCajas**, buscando la caja con menos clientes esperando.
    */
    cajaConMenosClientesActual := primero(listaDeCajas)
    listaActual := resto(listaDeCajas)
    while (not esVacia(listaActual)){
        cajaConMenosClientesActual := cajaConMenosClientesEsperandoEntre_Y_(cajaConMenosClientesActual, primero(listaActual))
        listaActual := resto(listaActual)
    }
    return (cajaConMenosClientesActual)
}

function cajaConMenosClientesEsperandoEntre_Y_(primerCaja, segundaCaja){
    /*
    Propósito:
    - Indica la caja que tenga menos clientes esperando entre las cajas **primerCaja** y **segundaCaja**. Si las cajas dadas tienen la misma cantidad de clientes esperando, entonces devuelve la caja **primerCaja**.
    Parámetros:
    - primerCaja: Caja
    - segundaCaja: Caja
    Precondiciones:
    - **primerCaja** y **segundaCaja** no pueden ser la misma caja.
    Tipo:
    - Caja
    Observaciones:
    - Ninguna.
    */
    return (choose primerCaja when (cantidadDeClientesEsperandoEn_(primerCaja) >= cantidadDeClientesEsperandoEn_(segundaCaja))
                   segundaCaja otherwise)
}

//c
function gobsMart_conIngresoDe_aCaja_(listaDeCajas, cliente, numeroDeCaja){
    /*
    Propósito:
    - Describe la lista **listaDeCajas** pero actualizando la caja del número **numeroDeCaja**, para registrar que el cliente **cliente** ingresó en la misma.
    Parámetros:
    - listaDeCajas: [Caja]
    - cliente: Cliente
    - numeroDeCaja: Número
    Precondiciones:
    - **numeroDeCaja** debe pertenecer a una de las cajas dentro de la lista **listaDeCajas**.
    - El cliente **cliente** no debe estar dentro de la lista "clientesEsperando" de la caja con el número **numeroDeCaja**.
    Tipo:
    - [Caja]
    Observaciones:
    - El cliente **cliente** debe agregarse al final de la lista "clientesEsperando" de la caja perteneciente al número de caja **numeroDeCaja**.
    */
    listaNueva := []
    foreach caja in listaDeCajas {
        if numeroCaja /= numero(caja) then {
            listaNueva := listaNueva ++ [caja]
        }
        else {
            listaNueva := listaNueva ++ [agregarCliente_ACaja_(cliente, caja)]
        }
    }
    return (listaNueva)
}

function agregarCliente_ACaja_(cliente, caja){
    /*
    Propósito:
    - Agrega el cliente **cliente** a la lista "clientesEsperando" de la caja **caja**, poniendolo en el último puesto de dicha lista.
    Parámetros:
    - cliente: Cliente
    - caja: Caja
    Precondiciones:
    - Ninguna.
    Tipo:
    - Caja
    Observaciones:
    - Ninguna.
    */
    return (Caja (caja | clientesEsperando <- clientesEsperando ++ [cliente]))
}

//d
function gobsMart_conIngresosDe_(listaDeCajas, listaDeClientes){
    /*
    Propósito:
    - Describe una lista de cajas actualizada, donde cada cliente de la lista **listaDeClientes** ingresó a una caja que acepta el medio de pago que posee y que esté menos ocupada en el momento que ingresa.
    Parámetros:
    - listaDeCajas: [Caja]
    - listaDeClientes: [Cliente]
    Precondiciones:
    - Debe haber al menos una caja en **listaDeCajas** que acepte el medio de pago de cada uno de los clientes en **listaDeClientes**.
    Tipo:
    - [Caja]
    Observaciones:
    - Es un recorrido de procesamiento sobre la lista **listaDeClientes**, agregando los clientes de la lista **listaDeClientes** a las cajas de la lista **listaDeCajas**.
    */
    listaNueva := listaDeCajas
    listaActualClientes := listaDeClientes
    while (not esVacia(listaActualClientes)){
        listaNueva := lista_ActualizadaConCliente_(listaNueva, primero(listaActualClientes))
        listaActualClientes := resto(listaDeClientes)
    }
    return (listaNueva)
}

function lista_ActualizadaConCliente_(listaDeCajas, cliente){
    /*
    Propósito:
    - Describe la lista **listaDeCajas** con el cliente **cliente** agregado a la lista de "clientesEsperando" de la caja más optima dentro de la lista **listaDeCajas**
    Parámetros:
    - listaDeCajas: [Caja]
    - cliente: Cliente
    Precondiciones:
    - Debe haber al menos una caja dentro de la lista **listaDeCajas** que acepte el tipo de pago del cliente **cliente**.
    Tipo:
    - [Caja]
    */
    return (gobsMart_conIngresoDe_aCaja_(listaDeCajas, cliente, numero(cajaMenosOcupadaDe_(lasCajasConPago_De_(tipoDePago(cliente))))))
}

function lasCajasConPago_De_(tipoDePago, listaDeCajas){
    /*
    Propósito:
    - Describe la lista de cajas que acepten el pago **tipoDePago** de la lista **listaDeCajas**.
    Parámetros:
    - tipoDePago: TipoDePago
    - listaDeCajas: [Caja]
    Precondiciones:
    - Debe haber al menos una caja dentro de la lista **listaDeCajas** que acepte el tipo de pago **tipoDePago**.
    Tipo:
    - [Caja]
    Observaciones:
    - Es un recorrido de filtrado sobre las cajas de la lista **listaDeCajas**. Filtrando las cajas que poseean el tipo de pago **tipoDePago** en su lista de "aceptaPago".
    */
    nuevaLista := []
    foreach caja in listaDeCajas {
        if contiene_A_(aceptaPago(caja), tipoDePago) then {
            nuevaLista := nuevaLista ++ [caja]
        }
    }
    return (nuevaLista)
}

function cajaMenosOcupadaDe_(listaDeCajas){
    /*
    Propósito:
    - Describe la caja de **listaDeCajas** con menos clientes esperando.
    Parámetros:
    - listaDeCajas: [Caja]
    Precondiciones:
    - La lista **listaDeCajas** debe tener al menos una caja dentro.
    Tipo:
    - Caja.
    Observaciones:
    - Es un recorrido de máximos y mínimos sobre las cajas dentro de la lista **listaDeCajas**, buscando la caja con menos clientes esperando.
    */
    cajaConMenosClientesActual := primero(listaDeCajas)
    listaActual := resto(listaDeCajas)
    while (not esVacia(listaActual)){
        cajaConMenosClientesActual := cajaConMenosClientesEsperandoEntre_Y_(cajaConMenosClientesActual, primero(listaActual))
        listaActual := resto(listaActual)
    }
    return (cajaConMenosClientesActual)
}

function cajaConMenosClientesEsperandoEntre_Y_(primerCaja, segundaCaja){
    /*
    Propósito:
    - Indica la caja que tenga menos clientes esperando entre las cajas **primerCaja** y **segundaCaja**. Si las cajas dadas tienen la misma cantidad de clientes esperando, entonces devuelve la caja **primerCaja**.
    Parámetros:
    - primerCaja: Caja
    - segundaCaja: Caja
    Precondiciones:
    - **primerCaja** y **segundaCaja** no pueden ser la misma caja.
    Tipo:
    - Caja
    Observaciones:
    - Ninguna.
    */
    return (choose primerCaja when (cantidadDeClientesEsperandoEn_(primerCaja) >= cantidadDeClientesEsperandoEn_(segundaCaja))
                   segundaCaja otherwise)
}

//e
function caja_conPrimeroFacturado(caja){
    /*
    Propósito:
    - Describe la caja resultante de facturar al primero de los clientes de la caja **caja**.
    Parámetros:
    - caja: Caja
    Precondiciones:
    - **caja** debe tener al menos un cliente en la lista "clientesEsperando".
    Tipo:
    - Caja
    */
    clienteACobrar := primero(clientesEsperando(caja))
    
    return (Caja (caja | facturado <- facturado(caja) + precioTotalProductosDe_(primero(clientesEsperando(caja)))
                       , clientesEsperando <- resto(clientesEsperando(caja))))
}

function precioTotalProductosDe_(cliente){
    /*
    Propósito:
    - Indica el precio total de la sumatoria de los precios de todos los productos del cliente **cliente**.
    Parámetros:
    - cliente: Cliente
    Precondiciones:
    - El cliente **cliente** debe tener al menos un producto en la lista "productos".
    Tipo:
    - Número.
    Observaciones:
    - Es un recorrido de acumulación sobre los productos de la lista "productos" del cliente **cliente**. Acumulando y sumando los valores de los precios de cada producto dentro de la lista "productos" de **cliente**.
    */
    totalActual := 0
    listaActual := productos(cliente)
    while (not esVacia(listaActual)) {
        totalActual := totalActual + precio(primero(listaActual))
        listaActual := resto(listaActual)
    }
    return (totalActual)
}

//f
function gobsMart_ConCliente_CambiaACaja_(listaDeCajas, dniCliente, numeroDeCaja){
    /*
    Propósito:
    - Describe la lista **listaDeCajas** actualizada, donde el cliente con el dni **dniCliente** se cambió a la caja con el número **numeroDeCaja**.
    Parámetros:
    - listaDeCajas: [Caja]
    - dniCliente: String
    - numeroDeCaja: Número
    Precondiciones:
    - Debe existir un cliente en alguna caja de **listaDeCajas** con el dni **dniCliente**.
    - Debe existir una caja en **listaDeCajas** con el número **numeroDeCaja**.
    Tipo:
    - [Caja]
    Observaciones:
    - 
    */
    nuevaLista := []
    foreach caja in listaDeCajas {
        if contiene_A_(dniDeTodosLosClientesDe_(caja), dniCliente) then {
            nuevaLista := nuevaLista ++ [caja_ActualizadaSinClienteCon_(caja, dniCliente)]
        }
        else {
            nuevaLista := nuevaLista ++ [caja]
        }
    }
    return (gobsMart_conIngresoDe_aCaja_(nuevaLista, perfilDelClienteConDni_(dniCliente), numeroDeCaja))
}

function dniDeTodosLosClientesDe_(caja){
    /*
    Propósito:
    - Describe una lista con los dni de todos los clientes de la caja **caja**.
    Parámetros:
    - caja: Caja
    Precondiciones:
    - Debe haber al menos un cliente en la lista "clientesEsperando" de la caja **caja**.
    Tipo:
    - [String]
    Observaciones: 
    - Es un recorrido de acumulación sobre los clientes de la caja **caja**, acumulando los dni de los mismos.
    */
    nuevaLista := []
    listaActual := clientesEsperando(caja)
    while (not esVacia(listaActual)){
        nuevaLista := nuevaLista ++ [dni(primero(listaActual))]
        listaActual := resto(listaActual)
    }
    return (nuevaLista)
}

function caja_ActualizadaSinClienteCon_(caja, dniCliente){
    /*
    Propósito:
    - Describe la caja **caja** sin el cliente con el dni **dniCliente**.
    Parámetros:
    - caja: Caja
    - dniCliente: String
    Precondiciones:
    - El cliente con el dni **dniCliente** no puede estar dos veces en la lista "clientesEsperando" de la caja **caja**.
    Tipo:
    - Caja
    Observaciones:
    - Ninguna.
    */
    return (Caja (caja | clientesEsperando <- elementosDe_SinAparicionesDe_(clientesEsperando(caja), perfilDelClienteConDni_En_(dniCliente, caja))))
}

function perfilDelClienteConDni_(dniCliente){
    /*
    Propósito:
    - Describe el perfil del cliente con el dni **dniCliente**.
    Parámetros:
    - dniCliente: String
    Precondiciones:
    - Debe de haber un cliente dentro de la lista [Cliente] con el dni **dniCliente**.
    - Solo debe haber un cliente dentro de la lista [Cliente] que tenga el dni **dniCliente**.
    Tipo:
    - Cliente
    Observaciones:
    - Es un recorrido de búsqueda sobre los clientes de la lista [Cliente], buscando el cliente con el dni **dniCliente**.
    */
    listaActual := [Cliente]
    while (not esVacia(listaActual) && dni(primero(listaActual)) /= dniCliente) {
        listaActual := resto(listaActual)
    }
    return (primero(listaActual))
}

//g
function fila_ConAumentoDePrecioAMarolio(listaDeClientes){
    /*
    Propósito:
    - Describe la lista de clientes **listaDeClientes** en donde se aumente 10 pesos al valor de todos los productos de la marca "Marolio" que tenga cada cliente.
    Parámetros:
    - listaDeClientes: [Cliente]
    Precondiciones:
    - Ninguna.
    Tipo:
    - [Cliente]
    Observaciones:
    - Ninguna.
    */
    listaNueva := []
    foreach cliente in listaDeClientes {
        listaNueva := listaNueva ++ [aumentarPreciosDeMarolioCliente_(cliente)]
    }
    return (listaNueva)
}

function aumentarPreciosDeMarolioCliente_(cliente){
    /*
    Propósito:
    - Describe el cliente **cliente**, con los productos "Marolio" con el precio actualizado 10 pesos más caro cada producto.
    Parámetros:
    - cliente: Cliente
    Precondiciones:
    - Ninguna.
    Tipo:
    - Cliente
    Observaciones:
    - Es un recorrido de procesamiento sobre los productos de la lista [Producto] del cliente **cliente**. Procesando si es un producto marca "Marolio" y, en caso de que lo sea, subirle el precio 10 pesos.
    */
    nuevaLista := []
    foreach producto in productos(cliente) {
        if marca(producto) == 'Marolio' then {
            nuevaLista := nuevaLista ++ [producto_Actualizado(producto)]
        }
        else {
            nuevaLista := nuevaLista ++ [producto]
        }
    }
    return (Cliente (cliente | productos <- nuevaLista)
}

function producto_Actualizado(producto){
    /*
    Propósito:
    - Describe el producto **producto** con el precio con aumento en 10 pesos.
    Parámetros:
    - producto: Producto
    Precondiciones:
    - Ninguna.
    Tipo:
    - Producto
    */
    return (Producto (producto | precio <- precio(producto) + 10))
}



//POKEMONES 
//1.a
function es_MasFuerteQue_(primerPokemon, segundoPokemon){
    /*
    Propósito:
    - Indica si el pokemon **primerPokemon** tiene más fuerza que el pokemon **segundoPokemon**.
    Parámetros:
    - primerPokemon: Pokemon
    - segundoPokemon: Pokemon
    Precondiciones:
    - **primerPokemon** y **segundoPokemon** no pueden ser el mismo pokemon.
    Tipo:
    - Booleano.
    Observaciones:
    - Ninguna.
    */
    return (choose True when (fuerza(primerPokemon) > fuerza(segundoPokemon))
                   False otherwise)
}

//1.b 
function esDeMayorNivel_Que_(primerPokemon, segundoPokemon){
    /*
    Propósito:
    - Indica si el pokemon **primerPokemon** tiene más nivel que el pokemon **segundoPokemon**.
    Parámetros:
    - primerPokemon: Pokemon
    - segundoPokemon: Pokemon
    Precondiciones:
    - **primerPokemon** y **segundoPokemon** no pueden ser el mismo pokemon.
    Tipo:
    - Booleano.
    Observaciones:
    - Ninguna.
    */
    return (choose True when (nivel(primerPokemon) > nivel(segundoPokemon))
                   False otheerwise)
}

//1.c
function pokemon_PotenciadoEn_(pokemon, numeroPotenciacion){
    /*
    Propósito:
    - Describe el pokemon **pokemon** con la fuerza y el nivel multiplicados por el número **numeroPotenciacion**.
    Parámetros:
    - pokemon: Pokemon
    - numeroPotenciacion: Número
    Precondiciones:
    - **numeroPotenciacion** no puede ser 0.
    Tipo:
    - Pokemon
    */
    return(Pokemon (pokemon | fuerza <- fuerza(pokemon) * numeroPotenciacion
                            , nivel <- nivel(pokemon) * numeroPotenciacion))
}

//1.d
function pokemon_ConValoresDuplicados(pokemon){
    /*
    Porpósito:
    - Describe el pokemon **pokemon** con la fuerza y el nivel duplicados.
    Parámetros:
    - pokemon: Pokemon
    Precondiciones:
    - Ninguna.
    Tipo:
    - Pokemon
    */
    return (Pokemon (pokemon | fuerza <- fuerza(pokemon) * 2
                             , nivel <- nivel(pokemon) * 2))
}

//1.e
function pokemon_PotenciadoEn_SiEsDeTipo_(pokemon, factor, tipo){
    /*
    Propósito:
    - Describe el pokemon **pokemon** potenciado con **factor** si es del tipo **tipo**, si no, devuelve el mismo pokemon **pokemon**.
    Parámetros:
    - pokemon: Pokemon
    - factor: Número
    - tipo: TipoDePokemon
    Precondiciones:
    - Ninguna.
    Tipo:
    - Pokemon
    */
    return (choose pokemon_PotenciadoEn_(pokemon, factor) when (tipo(pokemon) == tipo)
                   pokemon otherwise)
}

//1.f
function pokemon_Derrotado(pokemon){
    /*
    Porpósito:
    - Describe el pokemon **pokemon** con su fuerza en 0 y el campo "estaSaludable" en 'falso'.
    Parámetros:
    - pokemon: Pokemon
    Precondiciones:
    - Ninguna.
    Tipo:
    - Pokemon
    */
    return (Pokemon (pokemon | fuerza <- 0
                             , estáSaludable <- 'False'))
}

//2.a
function pokemonDe_Entrenados_(listaDePokemon, numeroPotenciacion){
    /*
    Propósito:
    - Describe la lista **listaDePokemon** con cada pokemon potenciado en base al número **numeroPotenciacion**.
    Parámetros:
    - listaDePokemon: [Pokemon]
    - numeroPotenciacion: Número.
    Precondiciones:
    - Debe haber al menos un pokemon en la lista **listaDePokemon**.
    Tipo:
    - [Pokemon]
    Observaciones: 
    - Es un recorrido de procesamiento sobre los pokemones de la lista **listaDePokemon**, potenciando todos los pokemones en base a **numeroPotenciacion**.
    */
    nuevaLista := []
    foreach pokemon in listaDePokemon {
        nuevaLista := nuevaLista ++ [pokemon_PotenciadoEn_(pokemon, numeroPotenciacion)]
    }
    return (nuevaLista)
}


//2.b
function pokemonDe_DelTipo_(listaDePokemon, tipoDePokemon){
    /*
    Propósito:
    - Describe una lista con los pokemones de la lista **listaDePokemones** que son del tipo **tipoPokemon**.
    Parámetros:
    - listaDePokemon: [Pokemon]
    - tipoDePokemon: TipoDePokemon
    Precondiciones:
    - Ninguna.
    Tipo:
    - [Pokemon]
    Observaciones:
    - Es un recorrido de filtrado sobre los pokemones de la lista **listaDePokemon**.
    */
    listaNueva := []
    foreach pokemon in listaDePokemon {
        listaNueva := listaNueva ++ singular_Si_(pokemon, tipo(pokemon) == tipoDePokemon)
    }
}

//2.c
function elMasFuerteDe_(listaDePokemon){
    /*
    Propósito:
    - Describe el pokemon con el nivel más alto de la lista **listaDePokemon**.
    Parámetros:
    - listaDePokemon: [Pokemon]
    Precondiciones:
    - Debe haber al menos dos pokemones en la lista **listaDePokemon**.
    Tipo:
    - Pokemon
    Observaciones:
    - Es un recorrido de máximos y mínimos sobre los pokemones de la lista **listaDePokemon**, buscando el pokemon con nivel más alto.
    - En caso de haber 2 o más pokemones con el mismo nivel más alto, devuelve al primer pokemon que aparece en la lista.
    */
    pokemonMasFuerteActual := primero(listaDePokemon)
    foreach pokemon in resto(listaDePokemon) {
        if (nivel(pokemon) > nivel(pokemonMasFuerteActual)) then {
            pokemonMasFuerteActual := pokemon
        }
    }
    return (pokemonMasFuerteActual)
}

//2.d
function pokemonDe_DelTipo_Duplicados(listaDePokemon, tipoPokemon){
    /*
    Propósito:
    - Describe la lista de pokemon **listaDePokemon** con los pokemones del tipo **tipoPokemon** duplicados, en la misma posición que tienen dentro de la lista **listaDePokemon**.
    Parámetros:
    - listaDePokemon: [Pokemon]
    - tipoPokemon: TipoDePokemon
    Precondiciones:
    - Ninguna.
    Tipo:
    - [Pokemon]
    Observaciones:
    - Es un recorrido de procesamiento sobre los pokemon de la lista **listaDePokemon**, duplicando los pokemones que sean del tipo **tipoPokemon** dentro de la lista.
    */
    listaNueva := []
    foreach pokemon in listaDePokemon {
        if (tipo(pokemon) == tipoPokemon) then {
            listaNueva := listaNueva ++ [pokemon, pokemon]
        }
        else {
            listaNueva := listaNueva ++ [pokemon]
        }
    }
    return (listaNueva)
}

//2.e
//Es igual al C









